#+TITLE: ðŸ“¦ Delivery Calendar

A Python script that automatically generates calendar events for your active Amazon and IKEA deliveries. The script logs into your retailer accounts, scrapes delivery information from your orders pages, and creates ICS calendar files with delivery events that you can import into any calendar application.

* Features

- *Automatic Login*: Securely logs into Amazon and IKEA using your credentials and 2FA (Amazon only)
- *Smart Date Parsing*: Handles various delivery date formats including "Arriving today", specific dates, date ranges, and time windows
- *Time-Aware Events*: Creates timed events when delivery windows are specified (e.g., "10am - 2pm")
- *Multi-Item Support*: Creates separate calendar events for each item in multi-item orders
- *Order Links*: Includes direct links to order details in event descriptions (Amazon)
- *Scheduled Updates*: Runs automatically every 24 hours to keep your calendar current
- *Headless Operation*: Runs without opening browser windows
- *Multi-Retailer Support*: ðŸ“¦ Track deliveries from multiple retailers in one application

* Supported Services & Roadmap

Currently, this application supports delivery tracking for:

- ðŸ“¦ *Amazon.in*: Full support for order tracking and calendar event generation
- ðŸšš *IKEA India*: Full support for order tracking and calendar event generation

*Note: This project focuses primarily on Indian e-commerce retailers and delivery services.*

Planned future support includes:

- ðŸ“š *Bookswagon*: Indian online bookstore delivery tracking
- ðŸ‘— *Myntra*: Fashion and lifestyle e-commerce platform
- ðŸš› *General Indian Courier Services*: Integration with multiple courier providers via the [[https://github.com/rajatdhoot123/indian-courier-api][Indian Courier API]]

* Requirements

- Python 3.12 or higher
- Chrome browser (for Selenium WebDriver)
- Amazon.in account with 2FA enabled (for Amazon tracking)
- IKEA India account (for IKEA tracking)
- TOTP secret for Amazon 2FA authentication

* Installation

** Clone the Repository
#+begin_src shell
git clone <repository-url>
cd delivery-calendar
#+end_src

** Install Dependencies
This project uses [[https://docs.astral.sh/uv/][uv]] for dependency management:

#+begin_src shell
uv sync
#+end_src

If you don't have uv installed, you can install it with:
#+begin_src shell
curl -LsSf https://astral.sh/uv/install.sh | sh
#+end_src

* Configuration

** Environment Variables

Create a ~/.env file in the project root with your retailer credentials:

#+begin_src shell

# ðŸ“¦ Amazon.in credentials (required for Amazon tracking)
    
AMAZON_EMAIL=your-amazon-email@example.com
AMAZON_PASSWORD=your-amazon-password
AMAZON_TOTP_SECRET=your-amazon-totp-secret


# ðŸšš IKEA India credentials (required for IKEA tracking)
    
IKEA_EMAIL=your-ikea-email@example.com
IKEA_PASSWORD=your-ikea-password
#+end_src
    

** Setting Up 2FA TOTP Secret
1. Go to your Amazon account security settings
2. Add a new 2FA authenticator app
3. When Amazon shows you the QR code, look for the "Can't scan?" or "Enter this text code instead" option
4. Copy the text secret (this is your TOTP secret)
5. Add it to your ~/.env file as AMAZON_TOTP_SECRET

** Enable 2FA (One-time Setup)
After setting up your TOTP secret, you need to enable it once:

#+begin_src python
import pyotp
totp = pyotp.TOTP("your-totp-secret-here")
print(totp.now())  # Enter this code on Amazon's website
#+end_src

* Usage
The script includes a scheduler that runs every 24 hours by default. Simply run:

#+begin_src shell

uv run delivery_calendar.py
    
#+end_src

And leave it running. Press Ctrl+C to stop the scheduler.

** Custom Polling Interval
You can specify a custom polling interval using the `--interval` argument (in hours):

#+begin_src shell
# Check every 12 hours
uv run delivery_calendar.py --interval 12

# Check every 6 hours
uv run delivery_calendar.py --interval 6
#+end_src
    

** Import Calendar

Import the generated calendar file into your preferred calendar application:

- ðŸ“… *calendar.ics*: Combined delivery events from all supported retailers

Import process:
- *Google Calendar*: Settings â†’ Import & Export â†’ Import
- *Apple Calendar*: File â†’ Import
- *Outlook*: File â†’ Import/Export â†’ Import an iCalendar file
    

* Development

** Running Tests
Install test dependencies and run the test suite:

#+begin_src shell
uv run pytest
#+end_src

** Project Structure
- delivery_calendar.py - Main orchestrator script
- scrapers/ - Retailer-specific scraper modules
  - base.py - Base scraper class with common functionality
  - amazon.py - Amazon-specific scraping logic
  - ikea.py - IKEA-specific scraping logic
- tests/ - Test suite for scraper functionality
- pyproject.toml - Project dependencies and configuration
- README.org - This documentation

* Troubleshooting

** Common Issues

*** "2FA required but no TOTP_SECRET provided"
Make sure your ~/.env file contains the correct AMAZON_TOTP_SECRET.

*** "Could not parse date"
The script handles most retailer date formats, but new formats may occasionally appear. Check the console output for the unparsed date string and consider filing an issue.

*** "Login failed"
- Verify your email and password are correct for the respective retailer
- For Amazon: Ensure 2FA is properly set up
- For IKEA: Ensure your IKEA account credentials are correct
- Check if the retailer is asking for additional verification (captcha, etc.)

*** Calendar events not appearing

- Verify the calendar.ics file was created in the output directory
- Check that your calendar application supports ICS imports
- Ensure you're importing the file correctly
    

** Browser Issues
The script uses Chrome in headless mode. If you encounter browser-related errors:
- Ensure Chrome is installed and up to date
- Check that ChromeDriver is compatible with your Chrome version

  - Review error screenshots if generated (amazon_error.png, ikea_error.png)
    

* Security Notes

  - Store your credentials securely in the ~/.env file
  - Never commit your ~/.env file to version control
  - The script only accesses your retailer orders pages (Amazon, IKEA)
  - All authentication is done locally on your machine
  - Respect each retailer's terms of service when using this script

* Contributing
This project welcomes contributions! The codebase is largely LLM-generated, making it a good example of AI-assisted development for practical automation tasks.

* License
This project is provided as-is for personal use. Please respect Amazon's terms of service when using this script.
